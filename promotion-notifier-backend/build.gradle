buildscript {
    ext {
        keycloakVersion = '16.1.1'
        lombokVersion = '1.18.22'
        springVersion = '5.3.16'
        groovyVersion = '3.0.9'
        springBootVersion = '2.6.3'
        springDepenedcyMgmtVersion = '1.0.11.RELEASE'
        springCloudVersion = '3.1.0'
        testcontainersVersion = '1.16.3'
        awaitilityVersion = '4.1.1'
        wiremockVersion = '2.27.2'
        baseDockerImage = 'openjdk:17.0.1-slim'
        getStubsJarFromProject = this.&getStubsJarFromProject
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'io.spring.dependency-management' version "${springDepenedcyMgmtVersion}" apply false
    id 'org.springframework.cloud.contract' version "${springCloudVersion}" apply false
    id 'com.google.cloud.tools.jib' version '3.2.0' apply false
    id "io.freefair.lombok" version "6.4.0"
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'java'

    group = 'io.mkrzywanski'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {

    apply plugin: 'groovy'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'


    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat = 'full'
            showStackTraces = true
            showStandardStreams = true
            info {
                events "started", "skipped", "failed"
                exceptionFormat "full"
            }
        }
    }

    tasks.withType(Checkstyle) {
        exclude '**/generated-test-sources/**'
    }

    dependencies {
        implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
        implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'

        testImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
        testImplementation "org.spockframework:spock-core"
        testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.9'

        testImplementation 'org.exparity:hamcrest-date:2.0.8'
        testImplementation "org.hamcrest:hamcrest-core:2.2"
        testImplementation 'org.assertj:assertj-core:3.22.0'
        testRuntimeOnly "net.bytebuddy:byte-buddy:1.12.8"

        implementation "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testImplementation "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

def getStubsJarFromProject(String projectName) {
    project(projectName).getTasksByName('verifierStubsJar', false).first().outputs.files
}
