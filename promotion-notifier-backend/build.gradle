buildscript {
    ext {
        keycloakVersion = '25.0.1'
        keycloakTestcontainersVersion = '3.4.0'
        lombokVersion = '1.18.34'
        groovyVersion = '4.0.22'
        springBootVersion = '3.3.2'
        springDepenedcyMgmtVersion = '1.1.6'
        springCloudVersion = '2023.0.2'
        testcontainersVersion = '1.19.8'
        awaitilityVersion = '4.2.0'
        wiremockVersion = '2.35.2'
        baseDockerImage = 'azul/zulu-openjdk:21-latest'
        hamcrestVersion = '2.2'
        seleniumVersion = '4.12.1'
        getStubsJarFromProject = this.&getStubsJarFromProject
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'io.spring.dependency-management' version "${springDepenedcyMgmtVersion}" apply false
    id 'org.springframework.cloud.contract' version "4.1.3" apply false
    id 'com.google.cloud.tools.jib' version '3.4.3' apply false
    id "io.freefair.lombok" version "8.3"
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'java'

    group = 'io.mkrzywanski'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_21

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
}

subprojects {

    apply plugin: 'groovy'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'

    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat = 'full'
            showStackTraces = true
            showStandardStreams = true
            info {
                events "started", "skipped", "failed"
                exceptionFormat "full"
            }
        }
    }

    tasks.withType(Checkstyle) {
        exclude '**/generated-test-sources/**'
    }

    dependencies {
        implementation "org.apache.groovy:groovy:${groovyVersion}"

        testImplementation platform("org.spockframework:spock-bom:2.3-groovy-4.0")
        testImplementation "org.spockframework:spock-core"
        testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.15.1'
        testImplementation 'org.exparity:hamcrest-date:2.0.8'
        testImplementation "org.hamcrest:hamcrest-core:${hamcrestVersion}"
        testImplementation 'org.assertj:assertj-core'

        implementation "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testImplementation "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    }
}

final def serviceProjects = ['pn-api-gateway', 'pn-email-service', 'pn-subscription-service', 'pn-matching-service', 'scrapper-app', 'subscription-app', 'pn-user-service'] as Set
final def loggingDir = rootProject.projectDir.path + '/logging'

subprojects.findAll{it.name in serviceProjects}
        .each {
            it.sourceSets.main.resources.srcDirs += loggingDir
        }

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.required = false
        csv.required =  false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

def getStubsJarFromProject(String projectName) {
    project(projectName).getTasksByName('verifierStubsJar', false).first().outputs.files
}

