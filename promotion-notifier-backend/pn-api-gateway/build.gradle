plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.cloud.tools.jib'
}

sourceSets {
    contractTest {
        groovy {
            srcDirs = ["${projectDir}/src/contractTest/groovy"]
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            resources.srcDirs = ["${projectDir}/src/contractTest/resources"]
        }
    }
}

configurations {
    contractTestImplementation.extendsFrom testImplementation
    contractTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation "org.springframework.cloud:spring-cloud-starter-gateway:${springCloudVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "io.micrometer:micrometer-registry-prometheus"

    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: "${wiremockVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.spockframework:spock-spring'

    contractTestImplementation "org.springframework.cloud:spring-cloud-starter-contract-stub-runner:${springCloudVersion}"
    contractTestRuntimeClasspath getStubsJarFromProject(':pn-subscription-service:subscription-app')
    contractTestImplementation("com.github.tomakehurst:wiremock-jre8-standalone:2.32.0")


    testImplementation "org.springframework.cloud:spring-cloud-test-support:${springCloudVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

}

jib {
    from {
        image = "${baseDockerImage}"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${springCloudVersion}"
    }
}

tasks.register('contractTest', Test) {
    useJUnitPlatform()
    description = 'Runs contract tests.'
    group = 'verification'

    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    testLogging {

        events("passed", "skipped", "failed")
        showStackTraces = true
        exceptionFormat = 'full'
    }
}

tasks.findByName('test').dependsOn('contractTest')