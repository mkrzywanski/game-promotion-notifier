gpn:
  queue:
    name: 'posts'
  user-service:
    url: http://localhost:8080
  subscription-service:
    url: http://localhost:8081
  matching-service:
    mongodb:
      collectionName: "user-offer-matches"
    publishing:
      cron: "*/1 * * * * *"
      queue:
        name: "notifications"
spring:
  application:
    name: pn-matching-service
  data:
    mongodb:
      database: posts
      username: root
      password: example
      authentication-database: admin
      auto-index-creation: true
  rabbitmq:
    host: localhost
    port: 5672
    username: test
    password: test
  main:
    banner-mode: log
  security:
    user:
      name: test
      password: test
    oauth2:
      client:
        registration:
          pn-matching-service:
            client-id: myclient-ac
            client-secret: 81e3fd9f-52ce-4549-8ea9-ae53e754da89
            authorization-grant-type: client_credentials
            provider: keycloak
        provider:
          keycloak:
#            issuer-uri: http://localhost:8180/auth/realms/myrealm
            #authorization-uri: http://localhost:8180/auth/realms/myrealm/protocol/openid-connect/auth
            token-uri: http://localhost:8081/auth/realms/test/protocol/openid-connect/token
            #user-info-uri: http://localhost:8180/auth/realms/myrealm/protocol/openid-connect/userinfo
            #jwk-set-uri: http://localhost:8180/auth/realms/myrealm/protocol/openid-connect/certs
            #user-name-attribute: preferred_username
management:
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
  metrics:
    tags:
      application: ${spring.application.name}

logging:
  config: classpath:logback.xml