plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.cloud.tools.jib'
}

sourceSets {
    integTest {
        groovy {
            srcDirs = ["${projectDir}/src/integTest/groovy"]
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            resources.srcDirs = ["${projectDir}/src/integTest/resources"]
        }
    }
}

configurations {
    integTestImplementation.extendsFrom testImplementation
    integTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation project(":pn-subscription-service:subscription-domain")
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-elasticsearch'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'org.spockframework', name: 'spock-spring'
    integTestImplementation "org.testcontainers:elasticsearch:${testcontainersVersion}"
    integTestImplementation 'org.springframework:spring-webflux'
    integTestImplementation 'org.keycloak:keycloak-admin-client:15.0.2'

    testImplementation 'org.springframework.security:spring-security-test'

}


tasks.register('integrationTest', Test) {
    useJUnitPlatform()
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    testLogging {
        events("passed", "skipped", "failed")
        showStackTraces = true
        exceptionFormat = 'full'
    }
}

idea {
    module {
        sourceDirs -= project.sourceSets.integTest.groovy.srcDirs
        testSourceDirs += project.sourceSets.integTest.groovy.srcDirs
    }
}

jib {
    from {
        image = "${baseDockerImage}"
    }
}